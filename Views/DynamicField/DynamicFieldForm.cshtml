@model TechNewsUI.Models.DynamicField

@{
    ViewData["Title"] = "DynamicFieldForm";
    Layout = "~/Views/Shared/AdminLayout.cshtml";
}

<link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css">
<link rel="stylesheet" href="https://cdn.korzh.com/metroui/v4.5.1/css/metro-all.min.css">
<link rel="stylesheet" href="~/css/create.css" />
<script type="text/javascript" src="~/js/dynamicfield.js" defer></script>

<style>
    .heading {
        display: grid;
        place-items: center;
    }
    

</style>



<h4 class="heading my-5">Dynamic Field Form</h4>
<div class="container w-100 d-flex justify-content-center align-items-center">

    <div class="row">
        <div class="col-md-4">
            <form method="post" asp-action="DynamicFieldForm" enctype="multipart/form-data">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                @*<div class="form-group">
                <label asp-for="DynamicFieldId" class="control-label"></label>
                <input asp-for="DynamicFieldId" class="form-control" />
                <span asp-validation-for="DynamicFieldId" class="text-danger"></span>
                </div>*@
                <div class="form-group">
                    <label asp-for="CategoryType" class="control-label"></label>
                    <select asp-for="CategoryType" class="form-control" id="CategoryType">
                        <option value="">Select Option</option>
                        <option value="Youtube">Youtube</option>
                        <option value="CaseStudies">Case Studies</option>
                        <option value="Article">Article</option>
                        <option value="Webinar">Webinar</option>
                        <option value="Podcast">Podcast</option>
                        <option value="EventSchedule">Event</option>
                        <option value="Magazine">Magazine</option>
                        <option value="LiveInterview">Live Interview</option>
                    </select>
                    <span asp-validation-for="CategoryType" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="FieldType" class="control-label"></label>
                    <select asp-for="FieldType" class="form-control" id="FieldType">
                        <option value="">Select Option</option>
                        <option value="TextBox">TextBox</option>
                        <option value="Text-Area">Text-Area</option>
                        <option value="CheckBox">CheckBox</option>

                        <option value="Files">Files</option>
                        <option value="DropDown">DropDown</option>
                        <option value="RadioButton">RadioButton</option>

                    </select>
                    <span asp-validation-for="FieldType" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="LabelText" class="control-label"></label>
                    <input asp-for="LabelText" class="form-control" />
                    <span asp-validation-for="LabelText" class="text-danger"></span>
                </div>
                <div class="form-group change" hidden id="PlaceHolder">
                    <label asp-for="PlaceHolder" class="control-label"></label>
                    <input asp-for="PlaceHolder" class="form-control" />
                    <span asp-validation-for="PlaceHolder" class="text-danger"></span>
                </div>

                <div class="form-group change" hidden id="Options">
                    <label asp-for="Options" class="control-label">Options(Options will be seperated by ,)</label>
                    <input type="text" asp-for="Options" class="form-control" data-role="taginput" data-tag-trigger="Comma" />
                    <span asp-validation-for="Options" class="text-danger"></span>
                </div>

                <div class="form-group change" hidden id="MaxLength">
                    <label asp-for="MaxLength" class="control-label"></label>
                    <input asp-for="MaxLength" class="form-control" />
                    <span asp-validation-for="MaxLength" class="text-danger"></span>
                </div>

                <div class="form-group change" hidden id="MinLength">
                    <label asp-for="MinLength" class="control-label"></label>
                    <input asp-for="MinLength" class="form-control" />
                    <span asp-validation-for="MinLength" class="text-danger"></span>
                </div>

                <div class="form-group" hidden>
                    <label asp-for="IsNumber" class="control-label"></label>
                    <input asp-for="IsNumber" class="form-control" />
                    <span asp-validation-for="IsNumber" class="text-danger"></span>
                </div>

                <div class="form-group" hidden id="FieldCode">
                    <label asp-for="FieldCode" class="control-label"></label>
                    <input asp-for="FieldCode" class="form-control" />
                    <span asp-validation-for="FieldCode" class="text-danger"></span>
                </div>


                <div class="form-group">
                    <input type="submit" value="Create" class="btn btn-dark w-100" />
                </div>
               
            </form>
        </div>
    </div>
</div>


<script src="https://cdn.korzh.com/metroui/v4.5.1/js/metro.min.js"></script>

<link rel="stylesheet" href="~/lib/limonte-sweetalert2/sweetalert2.min.css">
<script src="~/lib/limonte-sweetalert2/sweetalert2.all.min.js"></script>
<script src="~/lib/limonte-sweetalert2/sweetalert2.all.js"></script>
<script src="~/lib/limonte-sweetalert2/sweetalert2.min.js"></script>

@if (TempData["AddDynamic"] != null)
{


    <script>

        const Toast = Swal.mixin({
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true,
            didOpen: (toast) => {
                toast.addEventListener('mouseenter', Swal.stopTimer)
                toast.addEventListener('mouseleave', Swal.resumeTimer)
            }
        })

        Toast.fire({
            icon: 'success',
            title: '@TempData["AddDynamic"]'
        })
    </script>
}